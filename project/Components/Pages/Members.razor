@page "/members"
@layout MainLayout
@using System.Diagnostics

<div class="members-container">
    <!-- Page Header - No gaps with sidebar and top -->
    <div class="page-header">
        <h1 class="page-title">Manage Members</h1>
        <div class="header-actions">
            <input type="text"
                   class="search-bar"
                   placeholder="Search..."
                   @bind="searchQuery"
                   @bind:event="oninput"
                   @onkeyup="HandleSearch" />
            <button class="add-member-btn" @onclick="OpenAddMemberModal">+ Add New Member</button>
        </div>
    </div>

    <!-- Members Data Table -->
    <div class="table-container">
        <table class="members-table">
            <thead>
                <tr>
                    <th>MEMBER ID</th>
                    <th>NAME</th>
                    <th>EMAIL</th>
                    <th>PHONE</th>
                    <th>MEMBERSHIP TYPE</th>
                    <th>STATUS</th>
                    <th>JOIN DATE</th>
                    <th>ACTIONS</th>
                </tr>
            </thead>
            <tbody>
                @if (filteredMembers == null || !filteredMembers.Any())
                {
                    <tr>
                        <td colspan="8" class="no-data">
                            <div class="no-data-content">
                                <span class="no-data-icon">👥</span>
                                <p>No members found</p>
                                <p class="no-data-sub">Add your first member to get started</p>
                            </div>
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var member in filteredMembers)
                    {
                        <tr>
                            <td>@member.MemberId</td>
                            <td>
                                <div class="member-info">
                                    <div class="member-avatar">@member.Name.Substring(0, 1).ToUpper()</div>
                                    <span>@member.Name</span>
                                </div>
                            </td>
                            <td>@member.Email</td>
                            <td>@member.Phone</td>
                            <td>
                                <span class="membership-badge @GetMembershipClass(member.MembershipType)">
                                    @member.MembershipType
                                </span>
                            </td>
                            <td>
                                <span class="status-badge @(member.IsActive ? "status-active" : "status-inactive")">
                                    @(member.IsActive ? "Active" : "Inactive")
                                </span>
                            </td>
                            <td>@member.JoinDate.ToString("MM/dd/yyyy")</td>
                            <td>
                                <div class="action-buttons">
                                    <button class="action-btn edit-btn" @onclick="() => EditMember(member)" title="Edit">
                                        ✔
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>

    <!-- Add/Edit Member Modal -->
    @if (showModal)
    {
        <div class="modal-overlay" @onclick="CloseModal">
            <div class="modal-content" @onclick:stopPropagation="true">
                <div class="modal-header">
                    <h2>@(isEditMode ? "Edit Member" : "Add New Member")</h2>
                    <button class="close-btn" @onclick="CloseModal">×</button>
                </div>

                <div class="modal-body">
                    <div class="form-group">
                        <label>Full Name</label>
                        <input type="text" class="form-control" @bind="currentMember.Name" placeholder="Enter full name" />
                    </div>

                    <div class="form-group">
                        <label>Email</label>
                        <input type="email" class="form-control" @bind="currentMember.Email" placeholder="Enter email" />
                    </div>

                    <div class="form-group">
                        <label>Phone</label>
                        <input type="tel" class="form-control" @bind="currentMember.Phone" placeholder="Enter phone number" />
                    </div>

                    <div class="form-group">
                        <label>Membership Type</label>
                        <select class="form-control" @bind="currentMember.MembershipType">
                            <option value="Basic">Basic</option>
                            <option value="Premium">Premium</option>
                            <option value="VIP">VIP</option>
                        </select>
                    </div>

                    <div class="form-group">
                        <label>Status</label>
                        <select class="form-control" @bind="currentMember.IsActive">
                            <option value="true">Active</option>
                            <option value="false">Inactive</option>
                        </select>
                    </div>
                </div>

                <div class="modal-footer">
                    <button class="btn btn-cancel" @onclick="CloseModal">Cancel</button>
                    <button class="btn btn-save" @onclick="SaveMember">
                        @(isEditMode ? "Update" : "Add") Member
                    </button>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .members-container {
        padding: 0;
        background: #f0f2f5;
        min-height: 100vh;
    }

    /* Page Header - NO GAPS with sidebar and top */
    .page-header {
        background: white;
        padding: 20px 30px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin: 0;
        border-bottom: 1px solid #e0e0e0;
        /* Remove all gaps */
        margin-left: -30px;
        margin-right: -30px;
        margin-top: -30px;
        width: calc(100% + 60px);
    }

    .page-title {
        font-size: 24px;
        font-weight: 600;
        margin: 0;
        color: #333;
    }

    .header-actions {
        display: flex;
        gap: 15px;
        align-items: center;
    }

    .search-bar {
        padding: 10px 15px;
        border: 1px solid #ddd;
        border-radius: 6px;
        width: 250px;
        font-size: 14px;
        transition: all 0.3s;
    }

        .search-bar:focus {
            outline: none;
            border-color: #5cb85c;
            box-shadow: 0 0 0 3px rgba(92, 184, 92, 0.1);
        }

    .add-member-btn {
        background: #5cb85c;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 6px;
        font-size: 14px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
    }

        .add-member-btn:hover {
            background: #4cae4c;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(92, 184, 92, 0.3);
        }

    /* Table Container - NO GAPS with header and sidebar */
    .table-container {
        margin: 0;
        background: white;
        border-radius: 0;
        box-shadow: none;
        overflow: hidden;
        /* Remove all gaps - extend to full width */
        margin-left: -30px;
        margin-right: -30px;
        width: calc(100% + 60px);
    }

    .members-table {
        width: 100%;
        border-collapse: collapse;
    }

        .members-table thead {
            background: #6b8299;
            color: white;
        }

        .members-table th {
            padding: 16px;
            text-align: left;
            font-weight: 600;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            border-bottom: 2px solid #5a7088;
        }

        .members-table td {
            padding: 16px;
            border-bottom: 1px solid #f0f0f0;
            color: #333;
        }

        .members-table tbody tr {
            transition: background 0.2s;
        }

            .members-table tbody tr:hover {
                background: #f8f9fa;
            }

    .member-info {
        display: flex;
        align-items: center;
        gap: 12px;
    }

    .member-avatar {
        width: 36px;
        height: 36px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 14px;
    }

    .membership-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
    }

    .membership-basic {
        background: #e3f2fd;
        color: #1976d2;
    }

    .membership-premium {
        background: #f3e5f5;
        color: #7b1fa2;
    }

    .membership-vip {
        background: #fff3e0;
        color: #e65100;
    }

    .status-badge {
        padding: 6px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
    }

    .status-active {
        background: #d4edda;
        color: #155724;
    }

    .status-inactive {
        background: #f8d7da;
        color: #721c24;
    }

    .action-buttons {
        display: flex;
        gap: 8px;
    }

    .action-btn {
        background: transparent;
        border: none;
        font-size: 18px;
        cursor: pointer;
        padding: 6px;
        border-radius: 6px;
        transition: all 0.2s;
        color: #5cb85c;
        font-weight: bold;
    }

    .edit-btn:hover {
        background: #e3f2fd;
        transform: scale(1.1);
    }

    .no-data {
        text-align: center;
        padding: 60px 20px;
    }

    .no-data-content {
        color: #999;
    }

    .no-data-icon {
        font-size: 64px;
        display: block;
        margin-bottom: 16px;
    }

    .no-data-content p {
        margin: 8px 0;
        font-size: 16px;
    }

    .no-data-sub {
        font-size: 14px;
        color: #bbb;
    }

    /* Modal Styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        border-radius: 12px;
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
    }

    .modal-header {
        padding: 20px 24px;
        border-bottom: 1px solid #eee;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

        .modal-header h2 {
            margin: 0;
            font-size: 22px;
            color: #333;
        }

    .close-btn {
        background: transparent;
        border: none;
        font-size: 32px;
        color: #999;
        cursor: pointer;
        line-height: 1;
        padding: 0;
        width: 32px;
        height: 32px;
        transition: color 0.2s;
    }

        .close-btn:hover {
            color: #333;
        }

    .modal-body {
        padding: 24px;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #333;
            font-size: 14px;
        }

    .form-control {
        width: 100%;
        padding: 12px;
        border: 1px solid #ddd;
        border-radius: 8px;
        font-size: 15px;
        transition: all 0.3s;
    }

        .form-control:focus {
            outline: none;
            border-color: #5cb85c;
            box-shadow: 0 0 0 3px rgba(92, 184, 92, 0.1);
        }

    .modal-footer {
        padding: 16px 24px;
        border-top: 1px solid #eee;
        display: flex;
        justify-content: flex-end;
        gap: 12px;
    }

    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        font-size: 15px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s;
    }

    .btn-cancel {
        background: #f5f5f5;
        color: #666;
    }

        .btn-cancel:hover {
            background: #e0e0e0;
        }

    .btn-save {
        background: #5cb85c;
        color: white;
    }

        .btn-save:hover {
            background: #4cae4c;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(92, 184, 92, 0.3);
        }
</style>

@code {
    private string searchQuery = "";
    private bool showModal = false;
    private bool isEditMode = false;
    private Member currentMember = new Member();
    private List<Member> members = new List<Member>();
    private List<Member> filteredMembers = new List<Member>();

    protected override void OnInitialized()
    {
        LoadSampleData();
        filteredMembers = members;
    }

    private void LoadSampleData()
    {
        members = new List<Member>
        {
            new Member { MemberId = "M001", Name = "John Doe", Email = "john@example.com", Phone = "+1234567890", MembershipType = "Premium", IsActive = true, JoinDate = new DateTime(2025, 4, 30) },
            new Member { MemberId = "M002", Name = "Jane Smith", Email = "jane@example.com", Phone = "+1234567891", MembershipType = "VIP", IsActive = true, JoinDate = new DateTime(2024, 10, 31) },
            new Member { MemberId = "M003", Name = "Mike Johnson", Email = "mike@example.com", Phone = "+1234567892", MembershipType = "Basic", IsActive = false, JoinDate = new DateTime(2025, 7, 31) }
        };
    }

    private void HandleSearch()
    {
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            filteredMembers = members;
        }
        else
        {
            filteredMembers = members.Where(m =>
                m.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                m.Email.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                m.MemberId.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

    private void OpenAddMemberModal()
    {
        isEditMode = false;
        currentMember = new Member
        {
            MemberId = $"M{(members.Count + 1):D3}",
            JoinDate = DateTime.Now,
            IsActive = true,
            MembershipType = "Basic"
        };
        showModal = true;
        StateHasChanged();
    }

    private void EditMember(Member member)
    {
        isEditMode = true;
        currentMember = new Member
        {
            MemberId = member.MemberId,
            Name = member.Name,
            Email = member.Email,
            Phone = member.Phone,
            MembershipType = member.MembershipType,
            IsActive = member.IsActive,
            JoinDate = member.JoinDate
        };
        showModal = true;
        StateHasChanged();
    }

    private void SaveMember()
    {
        if (isEditMode)
        {
            var existingMember = members.FirstOrDefault(m => m.MemberId == currentMember.MemberId);
            if (existingMember != null)
            {
                existingMember.Name = currentMember.Name;
                existingMember.Email = currentMember.Email;
                existingMember.Phone = currentMember.Phone;
                existingMember.MembershipType = currentMember.MembershipType;
                existingMember.IsActive = currentMember.IsActive;
            }
        }
        else
        {
            members.Add(currentMember);
        }

        HandleSearch();
        CloseModal();
    }

    private void CloseModal()
    {
        showModal = false;
        currentMember = new Member();
        StateHasChanged();
    }

    private string GetMembershipClass(string membershipType)
    {
        return $"membership-{membershipType.ToLower()}";
    }

    public class Member
    {
        public string MemberId { get; set; } = "";
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Phone { get; set; } = "";
        public string MembershipType { get; set; } = "Basic";
        public bool IsActive { get; set; } = true;
        public DateTime JoinDate { get; set; } = DateTime.Now;
    }
}